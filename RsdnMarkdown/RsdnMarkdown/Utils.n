using Nitra;
using Nitra.Declarations;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Extensions;
using Nemerle.Utility;

using RsdnMarkdown.Declarations;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Net;
using System.Net.WebUtility;
//using System.Web.Util.HttpEncoder; 
// TODO: Перевести на это дело!

using SCG = System.Collections.Generic;

namespace RsdnMarkdown
{
  public module Utils
  {
    public GetHtml(rsdnMarkdown : string) : string
    {
      def sb      = StringBuilder();
      def reader  = StringReader(rsdnMarkdown);
      def blocks  = Utils.SplitQuotations(reader);
      def context = Context();
      
      def makeQuoteTree(blocks : List[_], i : int, levelNode : QuoteTree.Node) : void
      {
        when (i < 0)
          return;
          
        def (_, level, _) as content = blocks[i];
        
        if (level == levelNode.Level)
        {
          levelNode.Children.Insert(0, QuoteTree.Leaf(content));
          makeQuoteTree(blocks, i - 1, levelNode); // продолжаем перебор
        }
        else if (level > levelNode.Level)
        {
          def subLevel = QuoteTree.Node(levelNode);
          levelNode.Children.Insert(0, subLevel);
          subLevel.Children.Insert(0, QuoteTree.Leaf(content));
          makeQuoteTree(blocks, i - 1, subLevel); // входим в рекурсию
        }
        else // if (level < level.Level)
          makeQuoteTree(blocks, i, levelNode.Parent); // выходим из рекурсии
      }
      
      def root = QuoteTree.Node();
      makeQuoteTree(blocks, blocks.Count - 1, root);
      
      def makeHtml(nodes : List[QuoteTree]) : void
      {
        def split(elems : List[QuoteTree]) : Seq[string * List[QuoteTree]]
        {
          mutable allHasSamePrefix = true;
          mutable prevPrefix = null;
          def reversElems = elems.ToArray();
          Array.Reverse(reversElems);
          
          foreach (elem in reversElems)
          {
            | Leaf as x when prevPrefix == null     => prevPrefix = x.Prefix;
            | Leaf as x when prevPrefix != x.Prefix => allHasSamePrefix = false; break;
            | Leaf | Node => ()
          }
          
          when (allHasSamePrefix)
          {
            if (prevPrefix == null)
              return [];
            else
              return [(prevPrefix, elems)];
          }
          
          mutable result     = List();
          mutable currList   = List();

          foreach (elem in reversElems)
          {
            | Leaf as x when prevPrefix != x.Prefix =>
              when (prevPrefix != null)
                result.Add((prevPrefix, currList));
              currList = List();
              currList.Add(elem);
              prevPrefix = x.Prefix;

            | _ => currList.Add(elem);
          }
          
          result.Add((prevPrefix, currList));
          result
        }
        
        foreach (node in nodes)
        {
          | Leaf as x => 
            context.InQuotation = x.Level > 0;
            _ = sb.AppendLine(ProcessQuotationBlock(context, x.Text));
            
          | Node as x when x.Level > 0 =>
            def groups = split(x.Children);
            
            foreach((prefix, children) in groups)
            {
              _ = sb.AppendLine($<#<div class='reply-quota' data-prefix="$prefix">#>);
              makeHtml(children);
              _ = sb.AppendLine("</div>");
            }
              
          | Node as x => makeHtml(x.Children);
        }
      }
      
      makeHtml(root.Children);
     
      sb.ToString()
    }
    
    public ProcessQuotationBlock(context : Context, block : string) : string
    {
      def sb          = StringBuilder();
      def writer      = StringWriter(sb);

      def content(contentSpan : NSpan)
      {
        def paragraph   = block.Substring(contentSpan.StartPos, contentSpan.Length);
        def source      = SingleLineSourceSnapshot(paragraph);
        def parseResult = ContentSyntax.Start.Parse(source);
        def parseTree   = parseResult.CreateParseTree() :> ContentSyntaxParseTree.Start;
        parseTree.ToHtml(context, writer);
      }

      def listStack = SCG.Stack();
      mutable prevLevel;
      mutable prevIsOrdered;
      mutable isListItem;
      mutable nestingLevel = 0;
      def tableRows = List();
      
      def indent(nestingLevel : int) : void
      {
        repeat (nestingLevel)
          writer.Write("  ");
      }
      def closeBlock(tag : string) : void
      {
        indent(nestingLevel);
        writer.WriteLine(tag);
      }
      def close(tag : string) : void
      {
        writer.WriteLine(tag);
      }
      def tryCloseList() : void
      {
        when (!isListItem && prevLevel > 0)
        {
          while (listStack.Count > 0)
          {
            closeBlock(if (prevIsOrdered) "</ol>" else "</ul>");
            prevIsOrdered = listStack.Pop();
          }
          prevLevel = 0;
          prevIsOrdered = false;
        }
      }
      def tryCloseTable() : void
      {
        when (tableRows.Count == 0)
          return;
          
        ProcessTable(context, writer, block, tableRows);
          
        closeBlock("</tbody>");
        closeBlock("</table>");
        tableRows.Clear();
      }
      def tryClose()
      {
        tryCloseList();
        tryCloseTable();
      }
      def open(tag : string) : void
      {
        tryClose();
        indent(nestingLevel);
        writer.Write(tag);
      }
      def openBlock(tag : string) : void
      {
        tryClose();
        indent(nestingLevel);
        writer.WriteLine(tag);
      }
      def onTable(table : Table) : void
      {
        when (tableRows.Count == 0)
        {
          // началась таблица
          openBlock("<table>");
          openBlock("<tbody>");
        }
        
        tableRows.Add(table);
      }
      def openListItem(level : int, isOrdered : bool) : void
      {
        tryCloseTable();
        isListItem = true;
        
        if (level < prevLevel)
        {
          // Close opened lists
          for (mutable i = prevLevel; i > level; i--)
          {
            indent(nestingLevel);
            writer.WriteLine(if (prevIsOrdered) "</ol>" else "</ul>");
            nestingLevel--;
            prevIsOrdered = listStack.Pop();
            prevLevel = listStack.Count;
          }
        }
        else when (level > prevLevel)
        {
          // Open new nested list
          nestingLevel++;
          indent(nestingLevel);
          writer.WriteLine(if (isOrdered) "<ol>" else "<ul>");
          listStack.Push(prevIsOrdered);
          prevLevel = listStack.Count;
          prevIsOrdered = isOrdered;
        }

        when (prevLevel > 0 && prevLevel == level && prevIsOrdered != isOrdered)
        {
          // Lists has same level but  different oder. We should close previos list and open new one.
          indent(nestingLevel);
          writer.WriteLine(if (prevIsOrdered) "</ol>" else "</ul>");
          _ = listStack.Pop();
          listStack.Push(isOrdered);
          prevIsOrdered = isOrdered;
          indent(nestingLevel);
          writer.WriteLine(if (isOrdered) "<ol>" else "<ul>");
        }
        
        indent(nestingLevel + 1);
        writer.Write("<li>");
      }
      def foldable(header : NSpan, declarations : Seq[Paragraph]) : void
      {
        openBlock("<div class='foldable folded'>");
        nestingLevel++;
        open("<div class='block-name'>"); content(header); close("</div>");
        openBlock("<div>");
        decls(declarations);
        closeBlock("</div>");
        nestingLevel--;
        closeBlock("</div>");
      }
      and decls(paragraphs : Seq[Paragraph])
      {
        nestingLevel++;
        foreach (paragraph in paragraphs)
        {
          isListItem = false;

          match (paragraph)
          {
            | Plain             as p => open("<p>");                              content(p.Content);  close("</p>");
            | H1                as p => open("<h1>");                             content(p.Content);  close("</h1>");
            | H2                as p => open("<h2>");                             content(p.Content);  close("</h2>");
            | H3                as p => open("<h3>");                             content(p.Content);  close("</h3>");
            | H4                as p => open("<h4>");                             content(p.Content);  close("</h4>");
            | H5                as p => open("<h5>");                             content(p.Content);  close("</h5>");
            | H6                as p => open("<h6>");                             content(p.Content);  close("</h6>");
            | TagLine           as p => open("<div class='tagline'>");            content(p.Content);  close("</div>");
            | UnorderedListItem as p => openListItem(p.Level.ValueOrDefault, false); content(p.Content);  close("</li>");
            | OrderedListItem   as p => openListItem(p.Level.ValueOrDefault, true);  content(p.Content);  close("</li>");
            | Table             as p => onTable(p.Content)
            | CodeBlock         as p => 
              if (p.Header.IsEmpty)
              {
                // Добавлять лишние переносы внутри блока кода нельзя!!! Они все отобразятся браузером.
                if (p.Lang.IsEmpty)
                  open("<div class='code'>");
                else
                {
                  def lang = block.Substring(p.Lang.StartPos, p.Lang.Length);
                  open($"<div class='code $lang'>");
                }

                def code = block.Substring(p.Code.StartPos, p.Code.Length);
                writer.Write(code);
                close("</div>");
              }
              else
              {
                // Создаем такую же цитату, но без заголовка...
                def par = Paragraph.CodeBlock(p.Location, Code = p.Code, Header = NSpan(), Lang = p.Lang, TryEvalSpan=false);
                foldable(p.Header, [par]); // ... и рекурсивно генерим для нее HTML.
              }
            | Blockquote        as p => 
              if (p.Header.IsEmpty)
              {
                openBlock("<blockquote>");
                decls(p.Content);
                closeBlock("</blockquote>");
              }
              else
              {
                // Создаем такую же цитату, но без заголовка...
                def par = Paragraph.Blockquote(p.Location, Content = p.Content, Header = NSpan());
                foldable(p.Header, [par]); // ... и рекурсивно генерим для нее HTML.
              }
              
            | FoldedBlock       as p => foldable(p.Header, p.Content);
            | Moderator         as p => openBlock("<div class='moderator'>");     decls(p.Content);    closeBlock("</div>");
            | Hr                     => tryClose(); writer.WriteLine(); indent(nestingLevel); writer.WriteLine("<hr>"); writer.WriteLine();
            | _ => assert2(false, "No implementation for " + paragraph.GetType().Name);
          }
          
          assert2(prevLevel >= 0);
        }
        isListItem = false;
        tryClose();
        nestingLevel--;
      }

      def source          = SourceSnapshot(block);
      def parseResult     = ParagraphSyntax.Start.Parse(source);
      def parseTree       = parseResult.CreateParseTree();
      def paragraphRoot   = parseTree.GetAstUntyped() :> Root;
      decls(paragraphRoot.Paragraphs);
      sb.ToString()
    }

    public ProcessTable(context : Context, writer : StringWriter, text : string, tables : List[Table]) : void
    {
      mutable prev = null;
      mutable isContinue = false;
      mutable separatorCount = 0;

      def makeTableRows()
      {
        def result = List();
        
        foreach (table in tables)
        {
          def currSeparatorCount = table.Parts.Count(p => p is TablePart.Separator);
        
          if (isContinue && separatorCount == currSeparatorCount)
            prev ::= table;
          else
          {
            when (prev != null)
              result.Add(prev);
            prev = [table];
          }
          
          separatorCount = currSeparatorCount;
          isContinue = table.Close.Length > 2;
        }
      
        when (prev != null)
          result.Add(prev);
          
        result
      }
      def rows = makeTableRows();
      def makeTableArray() : array[array[string]]
      {
        def calcColumnsCount(parts : Seq[TablePart]) : int
        {
          mutable count = 1;
          foreach (part in parts)
          {
            | Table | Plain => ()
            | Separator     => count++;
            | _ => assert3(false);
          }
          count
        }
        def partsToColumnsText(table : Table) : array[string]
        {
          def parts = table.Parts;
          def count = calcColumnsCount(parts);
          def result = array(count);
          mutable i = 0;
          mutable start = table.Open.EndPos;
          foreach (part in parts)
          {
            | Table | Plain => ()
            | Separator     => result[i] = text.Substring(start, part.Span.StartPos - start); start = part.Span.EndPos; i++;
            | _ => assert3(false);
          }
          result[i] = text.Substring(start, table.Close.StartPos - start);
          result
        }
        def resultRows = array(rows.Count);
      
        foreach (row in rows with resultRowIndex)
        {
          | [parts] => resultRows[resultRowIndex] = partsToColumnsText(parts);
          | null | _ =>
            mutable count = 1;
            foreach (parts in row)
            {
              count = calcColumnsCount(parts.Parts);
              break;
            }
          
            def rowsCount = row.Count();
          
            def builders = array(count);
            for (mutable i = 0; i < builders.Length; i++)
              builders[i] = array(rowsCount);
        
            foreach (parts in row with rowIndex)
              foreach (colText in partsToColumnsText(parts) with colIndex)
                builders[colIndex][rowIndex] = colText;
          
            def columns = array(count);
            def nl = Environment.NewLine;
          
            foreach (builder in builders with i)
              columns[i] = string.Join(nl, builder);
          
            resultRows[resultRowIndex] = columns;
        }
        
        resultRows
      }
      def tableArray = makeTableArray();
      
      foreach (cols in tableArray)
      {
        writer.WriteLine("<tr>");
        foreach (col in cols)
        {
          writer.WriteLine("<td>");
          def content = ProcessQuotationBlock(context, col);
          writer.WriteLine(content);
          writer.WriteLine("</td>");
        }
        writer.WriteLine("</tr>");
      }
    }
    
    public SplitQuotations(reader : TextReader) : List[string * int * string]
    {
      def blocks = List();
      mutable line;
      while ({ line = reader.ReadLine(); line != null })
      {
        def (prefix, level) = GetQuotePrefix(line);
        blocks.Add((prefix, level, line.Substring(prefix.Length + level)));
      }

      def normalizeBlocks(blocks : List[string * int * string]) : void
      {
        mutable lastPrefix;
        mutable lastLevel;
      
        def nextPrefix(blocks : List[_], mutable i : int) : string * int
        {
          for (i++; i < blocks.Count; i++)
          {
            def (prefix, level, _) = blocks[i];
            when (level > 0)
              return (prefix, level);
          }
        
          (null, 0)
        }
      
        for (mutable i = 0; i < blocks.Count; i++)
        {
          def (prefix, level, text) = blocks[i];
        
          if (prefix == "" && string.IsNullOrWhiteSpace(text))
          {
            def (nextPrefix, nextLevel) = nextPrefix(blocks, i);
            when (nextPrefix == lastPrefix && nextLevel == lastLevel)
              blocks[i] = (lastPrefix, lastLevel, text);
          }
          else
          {
            lastPrefix = prefix;
            lastLevel  = level;
          }
        }

        lastPrefix = null;
        def parts = List();
        for (mutable i = 0; i < blocks.Count; i++)
        {
          def (prefix, level, _) = blocks[i];

          for (mutable j = i + 1; j < blocks.Count; j++)
          {
            def (nextPrefix, nextLevel, nextText) = blocks[j];

            if (prefix == nextPrefix && level == nextLevel)
              parts.Add(nextText);
            else
              break;
          }

          when (parts.Count > 0)
          {
            blocks.RemoveRange(i + 1, parts.Count);
            def (_, _, text) = blocks[i];
            parts.Insert(0, text);
            blocks[i] = (prefix, level, string.Join(Environment.NewLine, parts));
            parts.Clear();
          }

          lastPrefix = prefix;
        }
      }
      
      normalizeBlocks(blocks);
      blocks
    }
    
    public GetQuotePrefix(line : string) : string * int
    {
      mutable bingo;

      for (mutable i = 0; i < line.Length; i++)
      {
        def ch = line[i];
        when (char.IsLetter(ch) || ch == '_')
          continue;
        def start = i;
        for (; i < line.Length; i++)
        {
          def ch = line[i];
          when (ch == '>')
          {
            bingo = true;
            continue;
          }
          
          break;
        }
        
        if (bingo)
          return (line.Substring(0, start), i - start);
        else
          return ("", 0);
      }
      
      ("", 0)
    }
  }
}
