using Nitra;
using System.Linq;

namespace RsdnMarkdown.Declarations
{
  map syntax ParagraphSyntax.Start -> Root { Contents -> Paragraphs; }

  map syntax ParagraphSyntax.Content -> Paragraph
  {
    | Formated  { Part }
    | Paragraph -> Plain
      {
        Content = Content;
        Eol     = End.Location.Span;
      }
  }

  map syntax ParagraphSyntax.Part -> Paragraph
  {
    | H1                { Content = PartContent.Location.Span; }
    | H2                { Content = PartContent.Location.Span; }
    | H3                { Content = PartContent.Location.Span; }
    | H4                { Content = PartContent.Location.Span; }
    | H5                { Content = PartContent.Location.Span; }
    | H6                { Content = PartContent.Location.Span; }
    | TagLine           { Content = PartContent.Location.Span; }
    | UnorderedListItem { Content = PartContent.Location.Span; Level = ParsedValue(UnorderedListItemPrefix, UnorderedListItemPrefix.Length); }
    | OrderedListItem   { Content = PartContent.Location.Span; Level = ParsedValue(OrderedListItemPrefix, OrderedListItemPrefix.Length);   }
    | Hr                {}
    | Blockquote        { PartContents -> Content; Header = if (HeaderOpt.HasValue) HeaderOpt.Value.ContentSpan() else HeaderOpt.Location.Span; }
    | FoldedBlock       { PartContents -> Content; Header = Header.ContentSpan(); }
    | CodeBlock         { Code = Code; Lang = LanguageName; Header = if (HeaderOpt.HasValue) HeaderOpt.Value.ContentSpan() else HeaderOpt.Location.Span; }
    | Table             { Table -> Content; }
    | Moderator         { PartContents -> Content; }
  }

  map syntax ParagraphSyntax.Part.Table.TablePart -> TablePart
  {
    | Table     { Table -> Content; }
    | Separator { Content = Separator; }
    | Plain     { Content = Text; }
  }

  map syntax ParagraphSyntax.Part.Table.Table -> Table { Open = Open; Close = Close; TableParts -> Parts; }

  map syntax ParagraphSyntax.Part.Blockquote.PartContent  -> Paragraph { Content }
  map syntax ParagraphSyntax.Part.FoldedBlock.PartContent -> Paragraph { Content }
  map syntax ParagraphSyntax.Part.Moderator.PartContent   -> Paragraph { Content }

}
