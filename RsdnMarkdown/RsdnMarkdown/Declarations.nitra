using Nitra;
using System.Linq;

namespace RsdnMarkdown.Declarations
{
  declaration Root
  {
    Paragraphs : Paragraph*;
  }

  declarations Paragraph
  {
    | Plain             { Content : Nitra.NSpan; Eol : Nitra.NSpan; }
    | H1                { Content : Nitra.NSpan; }
    | H2                { Content : Nitra.NSpan; }
    | H3                { Content : Nitra.NSpan; }
    | H4                { Content : Nitra.NSpan; }
    | H5                { Content : Nitra.NSpan; }
    | H6                { Content : Nitra.NSpan; }
    | TagLine           { Content : Nitra.NSpan; }
    | UnorderedListItem { Content : Nitra.NSpan; Level : int; }
    | OrderedListItem   { Content : Nitra.NSpan; Level : int; }
    | Hr {}
    | FoldedBlock { Content : Paragraph*; }
    | Blockquote  { Content : Paragraph*; }
    | Moderator   { Content : Paragraph*; }
  }

  declare Root from ParagraphSyntax.Start { Paragraphs <- Contents; }

  declare Paragraph       from ParagraphSyntax.Content;
  declare Paragraph       from ParagraphSyntax.Content.Formated = Part.GetDeclaration(parent);
  declare Paragraph.Plain from ParagraphSyntax.Content.Paragraph
  {
    Content = Content;
    Eol     = End.Location.Span;
  }

  declare Paragraph from ParagraphSyntax.Part
  {
    | H1                { Content = PartContent.Location.Span; }
    | H2                { Content = PartContent.Location.Span; }
    | H3                { Content = PartContent.Location.Span; }
    | H4                { Content = PartContent.Location.Span; }
    | H5                { Content = PartContent.Location.Span; }
    | H6                { Content = PartContent.Location.Span; }
    | TagLine           { Content = PartContent.Location.Span; }
    | UnorderedListItem { Content = PartContent.Location.Span; Level = UnorderedListItemPrefix.Length; }
    | OrderedListItem   { Content = PartContent.Location.Span; Level = OrderedListItemPrefix.Length;   }
    | Hr                {}
    | Blockquote        { Content <- PartContents; }
    | FoldedBlock       { Content <- PartContents; }
    | Moderator         { Content <- PartContents; }
  }

  declare Paragraph       from ParagraphSyntax.Part.Blockquote.PartContent;
  declare Paragraph       from ParagraphSyntax.Part.FoldedBlock.PartContent;
  declare Paragraph       from ParagraphSyntax.Part.Moderator.PartContent;
}
