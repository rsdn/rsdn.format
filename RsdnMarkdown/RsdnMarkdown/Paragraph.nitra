namespace RsdnMarkdown
{
  [ExplicitSpaces]
  syntax module ParagraphSyntax
  {
    using PrettyPrint;
    using Outline;
    using TokenNames;
    using StandardSpanClasses;
    using Whitespaces;
    using Identifiers;
    using CStyleComments;

    using Nitra;
    using RsdnMarkdown.Utils;

    using System.IO;
    using System.Net;

    regex W                       = Whitespace;  // without new line
    regex Ws                      = Whitespace+; // without new line
    regex WsOpt                   = Whitespace*; // without new line
    regex Esc                     = "\\";
    regex OrderedListItemPrefix   = ("#" | "№")+;
    regex UnorderedListItemPrefix = "*"+;
    regex QuotePrefix             = IdentifierStartCharacter* ">"+;

    token PartContent = Content=(!NewLine Any)*
    {
      ToHtml(tag : string, writer : TextWriter) : void = ProcessContent(tag, writer, this, Content);
    }

    token Header = Ws !W !NewLine Header=(!NewLine Any)+
    {
      ContentSpan() : NSpan = Header;
    }

    [StartRule]
    syntax Start = Content* !Any;

    token End
    {
      | NewLine
      | Eof = !Any
    }

    syntax Content
    {
      | Formated = Part End
      | Paragraph = !Part Content=(!NewLine Any)* End
    }

    [StartRule]
    syntax Part
    {
      | H1                = "="                     !"=" WsOpt    PartContent
      | H2                = "=="                    !"=" WsOpt    PartContent
      | H3                = "==="                   !"=" WsOpt    PartContent
      | H4                = "===="                  !"=" WsOpt    PartContent
      | H5                = "====="                 !"=" WsOpt    PartContent
      | H6                = "======"                !"=" WsOpt    PartContent
      | TagLine           = "@@@"                   !"@" WsOpt    PartContent
      | UnorderedListItem = UnorderedListItemPrefix      WsOpt    PartContent
      | OrderedListItem   = OrderedListItemPrefix        WsOpt    PartContent
      | Hr                = "---"                   WsOpt
      | CodeBlock         = "{{" ContentSyntax.LanguageName "{" Header? WsOpt NewLine Code=(!"}}}" Any)* "}}}"
      | Blockquote        = "<\"" Header? WsOpt NewLine PartContent* Token WsOpt
        {
          regex Token = "\">";
          syntax PartContent = !Token Content;
        }
      | FoldedBlock       = "<+"  Header  WsOpt NewLine PartContent* Token WsOpt
        {
          regex Token = "+>";
          syntax PartContent = !Token Content;
        }
      | Moderator         = "<!"          WsOpt NewLine PartContent* Token WsOpt
        {
          regex Token = "!>";
          syntax PartContent = !Token Content;
        }
    }
  }
}